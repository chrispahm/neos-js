"class NeosServer(builtins.object)\n |  Methods defined here:\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  authenticatedSubmitJob(self, xmlstring, username, password, interface='')\n |      Submit an optimization job to NEOS using login credentials.\n |      \n |      :param xmlstring: string containing xml to run job\n |      :param username: registered username\n |      :param password: the username's password\n |      :param interface: usually 'Web', 'kestrel', etc\n |      :return: job number and job password\n |  \n |  disableSolver(self, category, solvername, input, password)\n |      Temporarily disable your solver.\n |      \n |      If you wish to temporarily remove your solver from NEOS, then you\n |      can use this method.  Your solver will be removed from the NEOS solvers\n |      index, and any users who attempt to use your solver while\n |      disabled will receive a message that it has been disabled.\n |      Use 'enableSolver' to reenable.\n |  \n |  emailJobResults(self, jobNumber, password)\n |      Return job results via email (if an address was provided).\n |      This is automatically called when a job terminates.\n |  \n |  enableSolver(self, category, solvername, input, password)\n |      Reenables a solver that has been disabled.\n |      \n |      To provide a new solver, use registerSolver.\n |  \n |  getCompletionCode(self, jobNumber, password)\n |      Get the completion code for Done jobs.\n |      \n |      Returns DB enum codes: \"Normal\", \"Out of memory\", \"Timed out\", \"Disk Space\", \"Server error\",\n |       OR job access failure codes: \"Unknown Job\", \"Bad Password\".\n |  \n |  getFinalResults(self, jobNumber, password)\n |      Gets results of job from NEOS.\n |      \n |      Retrieve results from NEOS.  If the job is still running, then\n |      this function will hang until the job is finished.\n |      \n |      This function will return a base-64 encoded object.\n |      Please read your XML-RPC client documentation for decoding.\n |      \n |      (For Python's xmlrpclib library, you can use the object's 'data'\n |      data member).\n |  \n |  getFinalResultsNonBlocking(self, jobNumber, password)\n |      Gets results of job from NEOS (non-blocking).\n |      \n |      Retrieve results from NEOS.  If the job is still running, then\n |      this function will return an empty string (base-64 encoded).\n |      \n |      This function will return a base-64 encoded object.\n |      Please read your XML-RPC client documentation for decoding.\n |      \n |      (For Python's xmlrpclib library, you can use the object's 'data'\n |      data member).\n |  \n |  getFullJobInfo(self, jobNumber, password)\n |      Gets information on the job.\n |        returns a tuple (category, solver_name, input, status,\n |                         start_time, end_time, station, user, password).\n |  \n |  getIntermediateResults(self, jobNumber, password, offset)\n |      Gets intermediate results of job from NEOS.\n |      \n |      Retrieve intermediate results from NEOS, starting at the character\n |      offset up to the last received data.  Intermediate results are usually\n |      the standard output of the solver daemon.\n |      \n |      If the job is still running, then this function will hang until\n |      another packet of output is sent to NEOS or the job is finished.\n |      The offset\n |      \n |      This function will return a tuple of thebase-64 encoded object and\n |      the new offset (object, newoffset).  The offset refers to uncoded\n |      characters.  Please read your XML-RPC client documentation for decoding.\n |      \n |      (For Python's xmlrpclib library, you can use the object's 'data'\n |      data member).\n |  \n |  getIntermediateResultsNonBlocking(self, jobNumber, password, offset)\n |      Gets intermediate results of job from NEOS.\n |      \n |      Retrieve intermediate results from NEOS.  Intermediate results are\n |      usually the standard output of the solver daemon.\n |      \n |      This function will return a tuple of thebase-64 encoded object and\n |      the new offset.  The offset refers to uncoded characters.\n |      Please read your XML-RPC client documentation for decoding.\n |      \n |      (For Python's xmlrpclib library, you can use the object's 'data'\n |      data member).\n |  \n |  getJobInfo(self, jobNumber, password)\n |      Gets information on the job.\n |        returns a four-tuple (category, solver_name, input, status).\n |  \n |  getJobStat(self, jobNumber)\n |  \n |  getJobStatus(self, jobNumber, password)\n |      Get the current status of your job.\n |      \n |      Returns \"Done\", \"Running\", \"Waiting\", \"Unknown Job\", or \"Bad Password\".\n |  \n |  getOutputFile(self, jobNumber, password, fileName)\n |      Gets output file of job from NEOS.\n |      \n |      Retrieve output file as specified by fileName from NEOS.\n |      The list of allowed files is restricted to those listed in config.py for security reasons.\n |      Will return error message if fileName does not exist.\n |      If the job is still running, then\n |      this function will block until the job is finished.\n |      \n |      This function will return a base-64 encoded object.\n |      Please read your XML-RPC client documentation for decoding.\n |      \n |      (For Python's xmlrpclib library, you can use the object's 'data'\n |      data member).\n |  \n |  getSolverInfo(self, category, solverName, inputMethod)\n |      Get information about a solver\n |      \n |      The method returns a string giving information about\n |      the chosen solver and the input it needs\n |  \n |  getSolverStatus(self, solver, inputMethod='', category='')\n |      Get status of solver on NEOS for specified solver, input, and category\n |      Returns a list of solver status:category:input\n |  \n |  getSolverTemplate(self, category, solvername, inputMethod)\n |      Returns a template for a given solver.\n |      \n |      If the solver category:solvername:inputMethod exists on NEOS, then\n |      an XML template is returned for using this solver via the XML-RPC\n |      interfaces.\n |  \n |  getXML(self, category, name, input)\n |      Returns the XML description of the given solver as a string.\n |  \n |  help(self)\n |  \n |  isAlive(self)\n |  \n |  killJob(self, jobNumber, password, killmsg='')\n |      Cancel a NEOS submission.\n |      \n |      If you want to cancel a job submission running on NEOS (or\n |      waiting to run on NEOS), then use this method.  We require\n |      the job password to prevent abuse of this function.\n |  \n |  listAllSolvers(self)\n |      Lists all solvers available on NEOS.\n |      \n |      Returns a list of category:solver:inputMethod\n |  \n |  listCategories(self)\n |      Lists all categories available on NEOS\n |      \n |      Returns a dictionary with entries {'abbreviated name':'full name',...}\n |      If you want to provide a solver to NEOS in an unavailable category,\n |      please email the NEOS administrators and we will add it for you.\n |  \n |  listExamples(self, solver, inputMethod='', category='')\n |      List examples for specified solver, input, and category\n |      Returns a list of example_name:category:inputMethod\n |  \n |  listSolversInCategory(self, category)\n |      List all NEOS solvers in this category\n |      \n |      Returns a list of solver:input for every solver in the category\n |      (category can be abbreviation or full_name)\n |  \n |  listSolversOnStation(self, user, hostname)\n |      List the solvers running on a given station.\n |      \n |      Goes through the SOLVERS table and determines which solvers\n |      are registered to run on this user@machine (plus pid,port).\n |  \n |  listStations(self, solver, inputMethod='', category='')\n |      List station(s) for specified solver, input, and category\n |      Returns a list of station hostnames\n |  \n |  ping(self)\n |      Verifies that this NeosServer is running.\n |      \n |      Returns message 'NeosServer is alive'\n |  \n |  pingHost(self, user, hostname)\n |      Verifies a solver daemon.\n |      \n |      If there is a solver daemon running on this host\n |      under the user's account, then a confimation message\n |      is returned ('OK').  Otherwise, an error message is returned.\n |  \n |  printQueue(self)\n |      Returns a string containing the current NEOS jobs.\n |  \n |  registerDaemon(self, user, host, port, pid)\n |      Register a solver daemon with NEOS.\n |      \n |      If you are maintaining a solver on the NEOS site, then this function\n |      will tell NEOS how to contact the solver daemon on your machine.\n |  \n |  registerExample(self, xmlstring, password)\n |      Register an example on the NEOS web pages.\n |      \n |      This function will upload an example onto the NEOS web page\n |      for your solver.\n |  \n |  registerJobPid(self, jobNumber, password, pid)\n |  \n |  registerSolver(self, xmlString)\n |      Register a new solver on NEOS\n |      \n |      This will create a new solver on NEOS.  Anyone is permitted\n |      to register their solver on NEOS.  If you would like to make\n |      your solver available, please read the documentation at\n |      @NEOS_WEB_SITE@/SolverHowTo.html\n |  \n |  removeExample(self, category, solvername, input, passwd, examplename)\n |      Remove an example from NEOS\n |      \n |      This will remove the example from your NEOS solver page.\n |  \n |  removeSolver(self, category, solvername, input, password)\n |      Remove a solver from NEOS.\n |      \n |      If you need to temporarily disable your solver, then you can use\n |      the disableSolver method instead.\n |  \n |  submitErrorResults(self, jobNumber, password, errorMessage)\n |  \n |  submitFinalResults(self, jobNumber, password, jobResults, completionCode=None)\n |      Submit final results for job associated with given job number.\n |      \n |      jobResults     is a string containing the solver results.\n |      completionCode may be None or a DB\n |                     enum(\"Normal\",\"Out of memory\",\"Timed out\",\"Server error\") to\n |                     provide additional information on the job's results.\n |  \n |  submitIntermediateResults(self, jobNumber, password, jobOut)\n |  \n |  submitJob(self, xmlstring, user='', interface='', id=0, username=None)\n |      Submit an optimization job to NEOS.\n |      \n |      Use this method to submit your job to NEOS.\n |      It will return a tuple containing (jobnumber,password).\n |      You can the use this jobnumber and password to get the\n |      results or status of your job using the methods getStatus,\n |      getIntermediateResults, and getFinalResults.\n |      \n |      In case of an error (NEOS Job queue is full), submitJob() will\n |      return (0,errorMessage)\n |      \n |      For more information on the format of the xmlstring, you can\n |      use the getSolverTemplate function.\n |  \n |  submitOutputFile(self, jobNumber, password, fileName, content)\n |  \n |  thread_id(self)\n |  \n |  validateSolverXML(self, xmlString)\n |      Checks the syntax of the solver XML description.\n |      \n |      Before submitting your solver description to NEOS, you can use\n |      this method to check if your syntax is correct.  It will either\n |      return 'OK' or an error message.\n |  \n |  version(self)\n |      Returns version number of the NEOS server (string).\n |  \n |  welcome(self)\n |      Returns a welcome message.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"