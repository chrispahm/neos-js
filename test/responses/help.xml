<?xml version='1.0'?>
<methodResponse>
<params>
<param>
<value><string>class NeosServer
 |  Methods defined here:
 |
 |  __init__(self)
 |
 |  authenticatedSubmitJob(self, xmlstring, username, password, interface='')
 |      Submit an optimization job to NEOS using login credentials.
 |
 |      :param xmlstring: string containing xml to run job
 |      :param username: registered username
 |      :param password: the username's password
 |      :param interface: usually 'Web', 'kestrel', 'email', etc
 |      :return: job number and job password
 |
 |  disableSolver(self, category, solvername, input, password)
 |      Temporarily disable your solver.
 |
 |      If you wish to temporarily remove your solver from NEOS, then you
 |      can use this method.  Your solver will be removed from the NEOS solvers
 |      index, and any users who attempt to use your solver while
 |      disabled will receive a message that it has been disabled.
 |      Use 'enableSolver' to reenable.
 |
 |  emailHelp(self)
 |      Returns general help message for email users
 |
 |  enableSolver(self, category, solvername, input, password)
 |      Reenables a solver that has been disabled.
 |
 |      To provide a new solver, use registerSolver.
 |
 |  gamsChecksum(self)
 |
 |  getFinalResults(self, jobNumber, password)
 |      Gets results of job from NEOS.
 |
 |      Retrieve results from NEOS.  If the job is still running, then
 |      this function will hang until the job is finished.
 |
 |      This function will return a base-64 encoded object.
 |      Please read your XML-RPC client documentation for decoding.
 |
 |      (For Python's xmlrpclib library, you can use the object's 'data'
 |      data member).
 |
 |  getFinalResultsNonBlocking(self, jobNumber, password)
 |      Gets results of job from NEOS (non-blocking).
 |
 |      Retrieve results from NEOS.  If the job is still running, then
 |      this function will return an empty string (base-64 encoded).
 |
 |      This function will return a base-64 encoded object.
 |      Please read your XML-RPC client documentation for decoding.
 |
 |      (For Python's xmlrpclib library, you can use the object's 'data'
 |      data member).
 |
 |  getIntermediateResults(self, jobNumber, password, offset)
 |      Gets intermediate results of job from NEOS.
 |
 |      Retrieve intermediate results from NEOS, starting at the character
 |      offset up to the last received data.  Intermediate results are usually
 |      the standard output of the solver daemon.
 |
 |      If the job is still running, then this function will hang until
 |      another packet of output is sent to NEOS or the job is finished.
 |      The offset
 |
 |      This function will return a tuple of thebase-64 encoded object and
 |      the new offset (object, newoffset).  The offset refers to uncoded
 |      characters.  Please read your XML-RPC client documentation for decoding.
 |
 |      (For Python's xmlrpclib library, you can use the object's 'data'
 |      data member).
 |
 |  getIntermediateResultsNonBlocking(self, jobNumber, password, offset)
 |      Gets intermediate results of job from NEOS.
 |
 |      Retrieve intermediate results from NEOS.  Intermediate results are
 |      usually the standard output of the solver daemon.
 |
 |      This function will return a tuple of thebase-64 encoded object and
 |      the new offset.  The offset refers to uncoded characters.
 |      Please read your XML-RPC client documentation for decoding.
 |
 |      (For Python's xmlrpclib library, you can use the object's 'data'
 |      data member).
 |
 |  getJobInfo(self, jobNumber, password)
 |      Gets information on the job.
 |      returns a four-tuple (category, solver_name, input, status).
 |
 |  getJobStat(self, jobNumber)
 |
 |  getJobStatus(self, jobNumber, password)
 |      Get the current status of your job.
 |
 |      Returns "Done", "Running", "Waiting", "Unknown Job", or "Bad Password".
 |
 |  getOutputFile(self, jobNumber, password, fileName)
 |      Gets output file of job from NEOS.
 |
 |      Retrieve output file as specified by fileName from NEOS.
 |      The list of allowed files is restricted to those listed in config.py for security reasons.
 |      Will return error message if fileName does not exist.
 |      If the job is still running, then
 |      this function will block until the job is finished.
 |
 |      This function will return a base-64 encoded object.
 |      Please read your XML-RPC client documentation for decoding.
 |
 |      (For Python's xmlrpclib library, you can use the object's 'data'
 |      data member).
 |
 |  getSolverInfo(self, category, solverName, inputMethod)
 |      Get information about a solver
 |
 |      The method returns a string giving information about
 |      the chosen solver and the input it needs
 |
 |  getSolverStatus(self, solver, inputMethod='', category='')
 |      Get status of solver on NEOS for specified solver, input, and category
 |      Returns a list of solver status:category:input
 |
 |  getSolverTemplate(self, category, solvername, inputMethod)
 |      Returns a template for a given solver.
 |
 |      If the solver category:solvername:inputMethod exists on NEOS, then
 |      an XML template is returned for using this solver via the XML-RPC
 |      or email interfaces.
 |
 |  getXML(self, category, name, input)
 |      Returns the XML description of the given solver.
 |
 |      This will be deprecated.  Use getSolverTemplate.
 |
 |  help(self)
 |
 |  isAlive(self)
 |
 |  killJob(self, jobNumber, password, killmsg='')
 |      Cancel a NEOS submission.
 |
 |      If you want to cancel a job submission running on NEOS (or
 |      waiting to run on NEOS), then use this method.  We require
 |      the job password to prevent abuse of this function.
 |
 |  listAllSolvers(self)
 |      Lists all solvers available on NEOS.
 |
 |      Returns a list of category:solver:inputMethod
 |
 |  listCategories(self)
 |      Lists all categories available on NEOS
 |
 |      Returns a dictionary with entries {'abbreviated name':'full name',...}
 |      If you want to provide a solver to NEOS in an unavailable category,
 |      please email the NEOS administrators and we will add it for you.
 |
 |  listExamples(self, solver, inputMethod='', category='')
 |      List examples for specified solver, input, and category
 |      Returns a list of example_name:category:inputMethod
 |
 |  listSolversInCategory(self, category)
 |      List all NEOS solvers in this category
 |
 |      Returns a list of solver:input for every solver in the category
 |      (category can be abbreviation or full_name)
 |
 |  listSolversOnStation(self, user, hostname)
 |      List the solvers running on a given station.
 |
 |      Goes through the SOLVERS table and determines which solvers
 |      are registered to run on this user@machine (plus pid,port).
 |
 |  listStations(self, solver, inputMethod='', category='')
 |      List station(s) for specified solver, input, and category
 |      Returns a list of station hostnames
 |
 |  ping(self)
 |      Verifies that this NeosServer is running.
 |
 |      Returns message 'NeosServer is alive'
 |
 |  pingHost(self, user, hostname)
 |      Verifies a solver daemon.
 |
 |      If there is a solver daemon running on this host
 |      under the user's account, then a confimation message
 |      is returned ('OK').  Otherwise, an error message is returned.
 |
 |  printQueue(self)
 |      Returns a string containing the current NEOS jobs.
 |
 |  registerDaemon(self, user, host, port, pid)
 |      Register a solver daemon with NEOS.
 |
 |      If you are maintaining a solver on the NEOS site, then this function
 |      will tell NEOS how to contact the solver daemon on your machine.
 |
 |  registerExample(self, xmlstring, password)
 |      Register an example on the NEOS web pages.
 |
 |      This function will upload an example onto the NEOS web page
 |      for your solver.
 |
 |  registerJobPid(self, jobNumber, password, pid)
 |
 |  registerSolver(self, xmlString)
 |      Register a new solver on NEOS
 |
 |      This will create a new solver on NEOS.  Anyone is permitted
 |      to register their solver on NEOS.  If you would like to make
 |      your solver available, please read the documentation at
 |      @NEOS_WEB_SITE@/SolverHowTo.html
 |
 |  removeExample(self, category, solvername, input, passwd, examplename)
 |      Remove an example from NEOS
 |
 |      This will remove the example from your NEOS solver page.
 |
 |  removeSolver(self, category, solvername, input, password)
 |      Remove a solver from NEOS.
 |
 |      If you need to temporarily disable your solver, then you can use
 |      the disableSolver method instead.
 |
 |  submitErrorResults(self, jobNumber, password, errorMessage)
 |
 |  submitFinalResults(self, jobNumber, password, jobResults, completionCode=None)
 |      # completionCode may be None or a DB enum("Normal","Out of memory","Timed out","Server error")
 |
 |  submitIntermediateResults(self, jobNumber, password, jobOut)
 |
 |  submitJob(self, xmlstring, user='', interface='', id=0, username=None)
 |      Submit an optimization job to NEOS.
 |
 |      Use this method to submit your job to NEOS.
 |      It will return a tuple containing (jobnumber,password).
 |      You can the use this jobnumber and password to get the
 |      results or status of your job using the methods getStatus,
 |      getIntermediateResults, and getFinalResults.
 |
 |      In case of an error (NEOS Job queue is full), submitJob() will
 |      return (0,errorMessage)
 |
 |      For more information on the format of the xmlstring, you can
 |      use the getSolverTemplate function.
 |
 |  submitOutputFile(self, jobNumber, password, fileName, content)
 |
 |  thread_id(self)
 |
 |  validateSolverXML(self, xmlString)
 |      Checks the syntax of the solver XML description.
 |
 |      Before submitting your solver description to NEOS, you can use
 |      this method to check if your syntax is correct.  It will either
 |      return 'OK' or an error message.
 |
 |  version(self)
 |      Returns version number of the NEOS server (string).
 |
 |  welcome(self)
 |      Returns a welcome message.
</string></value>
</param>
</params>
</methodResponse>
